import carla
import cv2
import numpy as np
import time

def add_checkerboard(image):
    array = np.frombuffer(image.raw_data, dtype=np.dtype("uint8"))
    array = np.reshape(array, (image.height, image.width, 4))
    array = array[:, :, :3]

    # Create a checkerboard pattern
    checkerboard_size = (7, 7)
    square_size = 50

    for y in range(0, checkerboard_size[1]):
        for x in range(0, checkerboard_size[0]):
            x_start = x * square_size
            y_start = y * square_size
            color = 255 if (x + y) % 2 == 0 else 0
            cv2.rectangle(array, (x_start, y_start), (x_start + square_size, y_start + square_size), (color, color, color), -1)

    cv2.imshow("Camera", array)
    cv2.waitKey(1)

def main():
    client = carla.Client('localhost', 2000)
    client.set_timeout(10.0)
    world = client.get_world()

    blueprint_library = world.get_blueprint_library()
    camera_bp = blueprint_library.find('sensor.camera.rgb')

    # Set camera attributes
    camera_bp.set_attribute('image_size_x', '800')
    camera_bp.set_attribute('image_size_y', '600')
    camera_bp.set_attribute('fov', '90')

    # Find a vehicle to attach the camera to
    vehicle = world.get_actors().filter('vehicle.*')[0]

    # Set the transform for the camera relative to the vehicle
    camera_transform = carla.Transform(carla.Location(x=1.5, z=2.4))

    # Spawn the camera sensor and attach it to the vehicle
    camera = world.spawn_actor(camera_bp, camera_transform, attach_to=vehicle)

    # Start capturing images and add the checkerboard pattern
    camera.listen(lambda image: add_checkerboard(image))

    # Run the simulation
    try:
        while True:
            world.tick()
            time.sleep(0.1)
    finally:
        camera.destroy()
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
